// Generated by CoffeeScript 1.7.1
var Rest, curl, path, rest, status, url;

module.exports = rest = function(options) {
  return new Rest(options);
};

module.exports.Rest = Rest;

module.exports.CURLAUTH_GSSNEGOTIATE = 4;

Rest = (function() {
  function Rest(options) {
    var _base;
    this.options = options;
    if ((_base = this.options).port == null) {
      _base.port = 50070;
    }
  }

  Rest.prototype.get = function(options, callback) {
    var doas, hostname, port, protocol, _ref;
    if (options.path == null) {
      return callback(Error('Options "path" missing'));
    }
    if (options.query == null) {
      return callback(Error('Options "query" missing'));
    }
    if (options.query.op == null) {
      return callback(Error('Options "query.op" missing'));
    }
    _ref = this.options, hostname = _ref.hostname, port = _ref.port, protocol = _ref.protocol, doas = _ref.doas;
    if (doas) {
      options.query.doas = doas;
    }
    if (options.code == null) {
      options.code = [200];
    }
    if (!Array.isArray(options.code)) {
      options.code = [options.code];
    }
    if (options.url == null) {
      options.url = url.format({
        protocol: protocol,
        hostname: hostname,
        port: port,
        pathname: path.join('/webhdfs/v1', options.path),
        query: options.query
      });
    }
    return curl(options.url, {
      CUSTOMREQUEST: 'GET',
      USERPWD: this.options.secured ? ':' : void 0,
      HTTPAUTH: this.options.secured ? rest.CURLAUTH_GSSNEGOTIATE : 0,
      VERBOSE: this.options.verbose,
      DEBUG: this.options.debug,
      FOLLOWLOCATION: options.follow
    }, function(err) {
      if (options.code.indexOf(this.code) === -1) {
        err = Error("" + this.code + " " + status[this.code]);
        err.code = this.code;
        return callback(err);
      } else {
        return callback(null, this, this.body);
      }
    });
  };

  Rest.prototype.put = function(options, callback) {
    var coptions, doas, hostname, port, protocol, _ref;
    if (!options.url) {
      if (options.path == null) {
        return callback(Error('Options "path" missing'));
      }
      if (options.query == null) {
        return callback(Error('Options "query" missing'));
      }
      if (options.query.op == null) {
        return callback(Error('Options "query.op" missing'));
      }
    }
    _ref = this.options, hostname = _ref.hostname, port = _ref.port, protocol = _ref.protocol, doas = _ref.doas;
    if (doas) {
      options.query.doas = doas;
    }
    if (options.code == null) {
      options.code = [200, 201];
    }
    if (!Array.isArray(options.code)) {
      options.code = [options.code];
    }
    if (options.url == null) {
      options.url = url.format({
        protocol: protocol,
        hostname: hostname,
        port: port,
        pathname: path.join('/webhdfs/v1', options.path),
        query: options.query
      });
    }
    coptions = {
      CUSTOMREQUEST: 'PUT',
      USERPWD: this.options.secured ? ':' : void 0,
      HTTPAUTH: this.options.secured ? rest.CURLAUTH_GSSNEGOTIATE : 0,
      VERBOSE: this.options.verbose,
      DEBUG: this.options.debug
    };
    if (options.data) {
      coptions.POSTFIELDS = options.data;
    }
    return curl(options.url, coptions, function(err, res) {
      if (options.code.indexOf(this.code) === -1) {
        err = Error("" + this.code + " " + status[this.code]);
        err.code = res.code;
        return callback(err, res);
      } else {
        return callback(null, res, res.body);
      }
    });
  };

  Rest.prototype.post = function(options, callback) {
    var coptions, doas, hostname, port, protocol, _ref;
    if (!options.url) {
      if (options.path == null) {
        return callback(Error('Options "path" missing'));
      }
      if (options.query == null) {
        return callback(Error('Options "query" missing'));
      }
      if (options.query.op == null) {
        return callback(Error('Options "query.op" missing'));
      }
    }
    _ref = this.options, hostname = _ref.hostname, port = _ref.port, protocol = _ref.protocol, doas = _ref.doas;
    if (doas) {
      options.query.doas = doas;
    }
    if (options.code == null) {
      options.code = [200, 201];
    }
    if (!Array.isArray(options.code)) {
      options.code = [options.code];
    }
    if (options.url == null) {
      options.url = url.format({
        protocol: protocol,
        hostname: hostname,
        port: port,
        pathname: path.join('/webhdfs/v1', options.path),
        query: options.query
      });
    }
    coptions = {
      CUSTOMREQUEST: 'POST',
      USERPWD: this.options.secured ? ':' : void 0,
      HTTPAUTH: this.options.secured ? rest.CURLAUTH_GSSNEGOTIATE : 0,
      VERBOSE: this.options.verbose,
      DEBUG: this.options.debug
    };
    if (options.data) {
      coptions.POSTFIELDS = options.data;
    }
    return curl(options.url, coptions, function(err) {
      if (options.code.indexOf(this.code) === -1) {
        err = Error("" + this.code + " " + status[this.code]);
        err.code = this.code;
        return callback(err, this);
      } else {
        return callback(null, this, this.body);
      }
    });
  };

  Rest.prototype.del = function(options, callback) {
    var doas, hostname, port, protocol, u, _ref;
    if (options.path == null) {
      return callback(Error('Options "path" missing'));
    }
    if (options.query == null) {
      return callback(Error('Options "query" missing'));
    }
    if (options.query.op == null) {
      return callback(Error('Options "query.op" missing'));
    }
    _ref = this.options, hostname = _ref.hostname, port = _ref.port, protocol = _ref.protocol, doas = _ref.doas;
    if (doas) {
      options.query.doas = doas;
    }
    if (options.code == null) {
      options.code = [200];
    }
    if (!Array.isArray(options.code)) {
      options.code = [options.code];
    }
    u = url.format({
      protocol: protocol,
      hostname: hostname,
      port: port,
      pathname: path.join('/webhdfs/v1', options.path),
      query: options.query
    });
    return curl(u, {
      CUSTOMREQUEST: 'DELETE',
      USERPWD: this.options.secured ? ':' : void 0,
      HTTPAUTH: this.options.secured ? rest.CURLAUTH_GSSNEGOTIATE : 0,
      VERBOSE: this.options.verbose,
      DEBUG: this.options.debug
    }, function(err) {
      if (options.code.indexOf(this.code) === -1) {
        err = Error("" + this.code + " " + status[this.code]);
        err.code = this.code;
        return callback(err);
      } else {
        return callback(null, this, this.body);
      }
    });
  };

  return Rest;

})();

path = require('path');

url = require('url');

status = require('http-status');

curl = require('node-curl');
